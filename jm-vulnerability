var palettes = require('users/gena/packages:palettes');
var globals = require('users/geraezemc/buildingbigdataapp:globals');
var UI_functions = require('users/geraezemc/buildingbigdataapp:UI-functions');
var cumulativeFlooded = require('users/geraezemc/buildingbigdataapp:globals').cumulativeFlooded;
var HRSL_30m = ee.ImageCollection("projects/sat-io/open-datasets/hrsl/hrslpop");

////// Vulnerability Index //////
var palette = palettes.colorbrewer.OrRd[4];

/// The 2 functions below are needed
// Function to calculate mean vulnerability index for a given AOI ////
var calculateMeanVulnerability = function(aoi) {
  
  var clippedHRSL = HRSL_30m.mean().clip(aoi);
  var clippedCumulativeFlooded = cumulativeFlooded.clip(aoi);
  var vulnerabilityIndex = clippedHRSL.multiply(clippedCumulativeFlooded);

  var meanVulnerability = vulnerabilityIndex.reduceRegion({
    reducer: ee.Reducer.mean(),
    geometry: aoi.geometry(),
    scale: 30,
    maxPixels: 1e9
  });
  
  var meanValue = meanVulnerability.get('b1');
  var feature = ee.Feature(aoi)
                  .set('mean_vulnerability_index', meanValue);
  return feature;
};

// Function to chart the mean vulnerability index for a given AOI
var vulnerability_index_chart = function(aoi) {
  
  var l2_list = aoi.aggregate_array('ADM2_NAME').distinct().getInfo().sort();
  var l2_name = l2_list[0];

  var result = ee.FeatureCollection(l2_list.map(function(l2_name) {
    var roi = aoi.filter(ee.Filter.eq('ADM2_NAME', l2_name)).first();
    var feature = calculateMeanVulnerability(roi);
    return feature;
    
  }));
  
  var sortedResult = result.sort('mean_vulnerability_index', false);
  var top10Result = sortedResult.limit(10);

  var chart = ui.Chart.feature.byFeature(top10Result, 'ADM2_NAME', 'mean_vulnerability_index')
              .setChartType('ColumnChart')
              .setOptions({
                title: 'Mean Vulnerability Index per sub-region',
                hAxis: {title: 'Region (l2)', slantedText: true, slantedTextAngle: 45},
                vAxis: {title: 'Mean Vulnerability Index'},
                legend: {position: 'none'},
                height: 200,
                width: 1000,
                series: {
                  0: {color: '#D83220'}
                }
              });
  return chart;
};

// Map Smoothed vulnerability ////
var mapVulnerabilityIndex = function(aoi) {
  
  var clippedHRSL = HRSL_30m.mean().clip(aoi);
  var clippedCumulativeFlooded = cumulativeFlooded.clip(aoi);
  var vulnerabilityIndex = clippedHRSL.multiply(clippedCumulativeFlooded);
  
  // Smoothing ////
  var kernel = ee.Kernel.square({
    radius: 500,
    units: 'meters'
  });
  
  var interpolate = function(image) {
    var smoothed = image.focal_mean({kernel: kernel, iterations: 1});
    var filled = image.unmask(smoothed);
    return filled;
  };
  
  var smoothedvulner = interpolate(vulnerabilityIndex).updateMask(interpolate(vulnerabilityIndex).gt(0));
  // var max_value = smoothedvulner.reduceRegion(ee.Reducer.max(), aoi).get('b1').getInfo();
  
  var maxval = smoothedvulner.reduceRegion({
    reducer: ee.Reducer.max(),
    geometry: aoi,
    scale: 30,
    bestEffort: true
  }).get('b1').getInfo();
  
  var createColorbar = UI_functions.createColorbar;
  var vuln_colorbar = createColorbar('Vulnerability Index', maxval, 0, palette);
  
  Map.addLayer(smoothedvulner, {min: 0, max: maxval, palette: palette}, 'Smoothed Vulnerability Index');
  Map.add(vuln_colorbar);
  // var createColorbar = UI_functions.createColorbar;
  // var vuln_colorbar = createColorbar('Vulnerability Index', max_value, 0, palette);
  
  // Map.addLayer(smoothedvulner, {min: 0, max: max_value, palette: palette}, 'Smoothed Vulnerability Index');
  // Map.add(vuln_colorbar);
  
};

// var aoi = globals.gaul_l2.filter(ee.Filter.eq('ADM1_NAME', aoi));
// var clippedCumulativeFlooded = cumulativeFlooded.clip(aoi);
// var clippedHRSL = HRSL_30m.mean().clip(aoi);
// var vulnerabilityIndex = clippedHRSL.multiply(clippedCumulativeFlooded);

// Call like the below two lines (uncomment first)
// vulnerability_index_chart(aoi)
// mapVulnerabilityIndex(aoi)

exports.mapVulnerabilityIndex = mapVulnerabilityIndex;
exports.vulnerability_index_chart = vulnerability_index_chart;